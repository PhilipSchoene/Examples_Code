.. -*- mode: rst; coding: utf-8; ispell-local-dictionary: "english" -*-
..
.. This file is part of JuliaBase, see http://www.juliabase.org.
.. Copyright © 2008–2015 Forschungszentrum Jülich GmbH, Jülich, Germany
..
.. This program is free software: you can redistribute it and/or modify it under
.. the terms of the GNU Affero General Public License as published by the Free
.. Software Foundation, either version 3 of the License, or (at your option) any
.. later version.
..
.. This program is distributed in the hope that it will be useful, but WITHOUT
.. ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.. FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
.. details.
..
.. You should have received a copy of the GNU Affero General Public License
.. along with this program.  If not, see <http://www.gnu.org/licenses/>.


.. index::
   pair: class-based; views

=================
Class-based views
=================

Class-based views are highly practical for the add/edit view of physical
processes because they keep code duplication at a minimum.  In some cases, you
get away with only a few lines of code.  Mixin classes reduce the redundancy
further.  Although it is still possible to have ordinary view *functions* for
physical processes, we do not recommend this.  If you follow the convention of
calling your view class “:py:class:`EditView`” and place it in a module called
:file:`class_name.py`, the :py:class:`~samples.utils.urls.PatternGenerator`
will detect it and create the URL dispatch for it.


The API
=======

The API of JuliaBase's class-based view classes is best described by discussing
the attributes and methods of the common base class
:py:class:`~samples.utils.views.class_views.ProcessWithoutSamplesView`.  Not
only if you derive your views, but also if you need to define your own
*abstract* view class, you should derive it from one of the concrete classes
presented in the next section, though, because you probably want to re-use part
of their functionality.

This class is found in the module :py:mod:`samples.utils.views.class_views`.

.. autoclass:: samples.utils.views.class_views.ProcessWithoutSamplesView
               :members: startup, get_next_id, build_forms, is_all_valid,
                         is_referentially_valid, save_to_database, get_title,
                         get_context_data


Main classes
============

The following names are found in the module :py:mod:`samples.utils.views`.

.. autoclass:: samples.utils.views.ProcessView
.. autoclass:: samples.utils.views.ProcessMultipleSamplesView
.. autoclass:: samples.utils.views.DepositionView
.. autoclass:: samples.utils.views.DepositionMultipleTypeView
.. autoclass:: samples.utils.views.SubprocessForm
.. autoclass:: samples.utils.views.SubprocessMultipleTypesForm


Mixins
======

.. autoclass:: samples.utils.views.RemoveFromMySamplesMixin
.. autoclass:: samples.utils.views.SamplePositionsMixin
.. autoclass:: samples.utils.views.SubprocessesMixin
.. autoclass:: samples.utils.views.MultipleStepsMixin
.. autoclass:: samples.utils.views.MultipleStepTypesMixin


.. index:: sub-processes

Sub-processes
=============

Quite often, there is the need to divide a process further into sub-processes.
JuliaBase realises this by special mixin classes.  In this section, I discuss
the bigger picture of it.  Look at the reference above for the details and
further information.

There are three mixins that deal with sub-processes:

- :py:class:`~samples.utils.views.SubprocessesMixin`
- :py:class:`~samples.utils.views.MultipleStepsMixin`
- :py:class:`~samples.utils.views.MultipleStepTypesMixin`


``SubprocessesMixin``
---------------------

This is a lightweight solution if you just want to have the forms for
sub-processes auto-generated.  It lets you create an edit/add view which allows
the user to enter the number of sub-processes, and to enter the sub-processes'
data.  This mixin does not enforce any ordering of the sub-processes – you may,
howvever, enforce an ordering in the show view yourself, possibly by a model
setting.

Because of the lack of user convenience, this mixin is useful particularly for
edit/add views which are primarily used by programs (e.g. crawlers) rather than
by human beings.  The solar simulator of the INM institute app demonstrates how
to use this mixin.


.. index:: steps

``MultipleStepsMixin``
----------------------

This mixin realises the JuliaBase concept of a *step*.  Steps are ordered
sub-processes.  On the model layer, they are models *not* derived from
``Process`` that contain an interger field ``number``.  This field is used to
define the ordering, and helps JuliaBase to provide some convenience
functionality: Re-ordering steps, duplicating them, deleting them.  The parent
model, for example the deposition process class, must define a method
:py:meth:`steps` that returns a query set of all steps, as in::

      def get_steps(self):
          return self.layers

The ``MultipleStepsMixin`` is the main ingredient for the class
:py:class:`~samples.utils.views.DepositionView`.  You can see the latter in
action in the 5-chamber deposition views of the INM institute app.


.. index:: My steps

“My steps”
..........

Moreover with steps, your users can use something called “my steps”.  It is a
list of favourite steps that occur frequently.  Every step in this list has a
nickname, chosen by the user.  When composing a new process, the user can
select from this list instead of entering the step data manually.  JuliaBase
stores the “my steps” list for each user, however, you must add a view that
lets the user set this list for each process class(es) that should be
supported.  In JuliaBase's example app “institute”, a “my layers” view is
included which realises this functionality for deposition layers.


``MultipleStepTypesMixin``
--------------------------

This mixin is the same as above, but each step may be of a different model
class.  Using this mixin is slightly more complicated but also more powerful
for obvious reasons.  The steps must be of a common base model class, of which
the concrete model classes are derived.  Consequently, the base model class
must inherit from :py:class:`jb_common.models.PolymorphicModel`.  The
:py:meth:`steps` method may return instances of the base model class, because
the class-based view already takes care of finding the actual instance.

In the view model, you should derive the forms classes for your step types from
:py:class:`~samples.utils.views.SubprocessMultipleTypesForm`.  This takes care
of an extra field ``step_type`` that helps the view class to identify the step
type from he HTTP POST data.

This forms the basis of
:py:class:`~samples.utils.views.DepositionMultipleTypeView`.  You can see the
latter in action in the cluster-tool deposition views of the INM institute app.
