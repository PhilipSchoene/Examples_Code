.. -*- mode: rst; coding: utf-8; ispell-local-dictionary: "english" -*-
..
.. This file is part of JuliaBase, see http://www.juliabase.org.
.. Copyright © 2008–2015 Forschungszentrum Jülich GmbH, Jülich, Germany
..
.. This program is free software: you can redistribute it and/or modify it under
.. the terms of the GNU Affero General Public License as published by the Free
.. Software Foundation, either version 3 of the License, or (at your option) any
.. later version.
..
.. This program is distributed in the hope that it will be useful, but WITHOUT
.. ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
.. FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
.. details.
..
.. You should have received a copy of the GNU Affero General Public License
.. along with this program.  If not, see <http://www.gnu.org/licenses/>.

.. index:: remote client

=================
The remote client
=================

The “remote client” is a programming library for contacting JuliaBase over the
network.  Being a library, it is not a program per se but used by your own code
for the bidirectional communication with the database.  The remote client
communicates through a REST HTTP interface implemented in the JuliaBase server.
This interface could be used directly, however, the remote client makes it much
easier.

In the following, we will describe what the remote client can do and how to get
it running.  For the API itself, we have to refer to the documentation in the
sources of the Python files in :file:`remote_client/`.  Note especially the
examples in :file:`remote_client/examples/`.


Use cases
=========

The remote client has many applications.


.. index:: crawlers

Crawlers
--------

Crawlers are programs that go through a bunch of data or log files and transmit
their content to the database.  For example, a measurement setup may write a
data file for every measurement run.  Every hour, a crawler is called, which
scans for new files.  It reads the new files and uses the content to add new
measurements processes to the database.  This way, new measurements
automatically end up in the database.  You may have more than one crawler
regularly running in your institute.

The very same crawler can also be used to import legacy data.  The crawler can
be programmed in such a way that during its first run, it imports thousands of
data sets of recent years, and from there on, it imports newly added data sets
every hour.

Since crawlers run unattendedly, they must be very robust.  If a data file is
invalid, or if the central server is temporarily unavailable, it must gently
exit and try again next time, without forgetting to add something, and without
adding things twice.

Moreover, legacy data mostly is poorly structured and organized.  If you think
your data is the exception, think again.  During writing the crawler, you will
be surprised how many odd ideas and mistakes your colleagues are capable of.

Be that as it may, crawlers are the primary use case for the remote client.
The remote client contains functions especially for making writing them as easy
as possible.


Connecting the setup with the database
--------------------------------------

A more direct way than the crawler for bringing processing and measurement data
into the database, albeit not always feasible, is to extend the control program
of the experimental setup.  For this, you must have access to the source code
of the control program.  Then, you can use the remote client for writing new
runs immediately into the database.

However, the communication needn't be one-way.  You can also use the remote
client to authenticate the user, to check whether he or she is allowed to use
this setup, and to check whether the sample names belong to valid and for the
user accessible samples.

The remote client is written in Python, however, it is easy to use it from
programs written in other programming languages, and JuliaBase ships with
bindings to Delphi, LabVIEW, and Visual Basic.


Data mining and analysis
------------------------

Everyone with browser access to the JuliaBase database can use the remote
client for accessing, too.  The permissions will be the same in both cases, of
course.  This can be used by researchers capable of programming to get data
from the database and do something with it, e.g. creating statistics or
evaluating raw data.

Imagine the following: A researcher makes many sample series and measures their
temperature-dependent conductivity.  The researcher can write a program that
extracts the names of the raw data files from the database, then creates a plot
for each sample series with the conductivity curves of all samples of that
series, and writes these plots back to the database.  There, one can see them
on the series' pages, and in every sample's data sheet.


.. _Extending the remote client:

Extending the remote client
===========================

As for JuliaBase itself, also the remote client should be extended with the
functionality special to your institution.  This is not absolutely necessary,
but without it, you can only use the very basic functionality.  However,
extending the remote client is much easier than extending JuliaBase.

.. _remote-client-file-list:

In JuliaBases' source code, the default remote client resides in the directory
:file:`remote_client/`, and it has the following structure::

    remote_client/
        jb_remote_inm.py
        jb_remote/
            __init__.py
            common.py
            samples.py
            settings.py
            ...

Replace the file :file:`jb_remote_inm.py` with your own institute's code,
and give your file a name derived from your institution's name.  Your file
should start with something like::

    from jb_remote import *

    settings.ROOT_URL = settings.TESTSERVER_ROOT_URL = "https://juliabase.my-institute.edu/"

From there on, you are totally free how to program your incarnation of the
remote client.  You may use :file:`jb_remote_inm.py` as a source of
inspiration, of course.


Settings
--------

The following settings in the remote client are available and should be set in
your :file:`jb_remote_inm.py`:

``ROOT_URL``
  The URL of the production server.  It must end in a slash.  Default: ``None``

``TESTSERVER_ROOT_URL``
  The URL of the test server.  It must end in a slash.  Default:
  ``"https://demo.juliabase.org/"``

``SMTP_SERVER``
  The DNS name of the SMTP server used for outgoing mail.  It may be used in
  crawlers to send success or error emails.  You may add a port number after a
  colon.  Default: ``"mailrelay.example.com:587"``

``SMTP_LOGIN``
  The login name of the SMTP server.  If empty, no login is performed.  If not
  empty, TLS is used.  Default: ``"username"``

``SMTP_PASSWORD``
  The password used to login to the SMTP server through TLS.  Default:
  ``"password"``

``EMAIL_FROM``
  The sender used for outgoing mails.  Default: ``"me@example.com"``

``EMAIL_TO``
  The recipient of outgoing mails.  Default: ``"admins@example.com"``


Local installation and usage
============================

Once you finished extending the default remote client, *your* remote client
consists of the files listed :ref:`above <remote-client-file-list>`, with
:file:`jb_remote_inm.py` substituted by your file called, say,
:file:`jb_remote_my_institute.py`.  This set of files needs to be copied to the machines
where the remote client is supposed to be used, and the top directory (the one
with your :file:`jb_remote_my_institute.py`) should be in :envvar:`PYTHONPATH`.

Then, you use the remote client with a Python script as easy as this::

    from jb_remote_my_institute import *

    setup_logging("console")
    login("juliabase", "12345")

    sample = Sample("14-JS-1")
    sample.current_location = "Sean's office"
    sample.edit_description = "location changed"
    sample.submit()

    logout()

By the way, the files are organized in a way that you can update very
conveniently: If a new version of JuliaBase is released, you simply have to
replace the :file:`jb_remote/` subdirectory with the new one.


Classes and functions
=====================

As explained in `Extending the remote client`_, the following names become
available by saying

::

    from jb_remote import *

.. automodule:: jb_remote.common
                :members: login, connection, JuliaBaseConnection, JuliaBaseError, logout, primary_keys, PrimaryKeys,
                          setup_logging, parse_timestamp, double_urlquote, format_timestamp, sanitize_for_markdown,
                          as_json

.. automodule:: jb_remote.samples
                :members:
